//: [Previous](@previous)

import Foundation

/*:
访问控制:
****
1. 什么是访问控制?
访问控制可以限定其他资源文件或模块中的代码对你的代码的访问级别。
这个特性可以让我们隐藏代码的一些实现细节, 并且可以为其他人可以访问和使用的代码提供接口。

*/

/*:
一、模块和源文件
Swift 中的访问控制模型基于模块和源文件这两个概念。
什么是模块？
模块指的是独立的代码单元, 框架或应用程序会作为一个独立的模块来构建和发布。在Swift中, 一个模块可以使用 import 关键字导入另外一个模块。
什么是源文件？
源文件就是Swift中的源代码文件, 它通常属于一个模块, 即一个应用程序或者框架, 即一个应用程序或者框架。尽管我们一般会将不同的类型分别定义在不同的源文件中, 但是一个源文件也可以包含多个类型、函数之类的定义。

二、访问级别
Swift 为代码中的实体提供了五种不同的访问级别。这些访问级别不仅与源文件中定义的实体相关，同时也与源文件所属的模块相关。

1、访问级别
1. 开发访问(open)
可以访问同一模块源文件中的任何实体，在模块外也可以通过导入该模块来访问源文件里的所有实体。
2. 公开访问(public)
[同上]
3. 内部访问(internal)
可以访问同一模块源文件中的任何实体，但是不能从模块外访问该模块源文件中的实体。
4. 文件私有访问(filepart)
限制实体只能被所定义的文件内部访问。
5. 私有访问(private)
限制实体只能在所定义的作用域内使用。
注意:开发访问为最高(限制最少)访问界别, 私有访问为最低(限制最多)访问级别。


2、开放访问只作用于类类型和类的成员, 它和公开访问的区别:
1. 公开访问或者其他更严访问级别的类，只能在它们定义的模块内部被继承。
2. 公开访问或者其他更严访问级别的类成员，只能在它们定义的模块内部的子类中重写。
3. 开放访问的类，可以在它们定义的模块中被继承，也可以在引用它们的模块中被继承。
4. 开放访问的类成员，可以在它们定义的模块中子类中重写，也可以在引用它们的模块中的子类重写。
5. 把一个类标记为开放，显式地表明，你认为其他模块中的代码使用此类作为父类，然后你已经设计好了你的类的代码了。

3、访问级别基本原则
Swift 中的访问级别遵循一个基本原则：不可以在某个实体中定义访问级别更低（更严格）的实体。

4、默认访问级别
如果你不为代码中的实体显式指定访问级别，那么它们默认为 internal 级别。

5、单目标应用程序的访问级别
当你编写一个单目标应用程序时，应用的所有功能都是为该应用服务，而不需要提供给其他应用或者模块使用，所以我们不需要明确设置访问级别，使用默认的访问级别 internal 即可。


三、访问控制语法
通过修饰符 open，public，internal，filepart，private 来声明实体的访问级别：

四、自定义类型
1. 如果你将类型指定为"私有"或者"文件私有"级别，那么该类型的所有成员的默认访问级别也会变成"私有"或者"文件私有"级别。
2. 如果你将类型指定为公开或者内部访问级别（或者不明确指定访问级别，而使用默认的内部访问级别），那么该类型的所有成员的默认访问级别将是内部访问。

1、元组类型

2、函数类型

3、枚举类型

4、


五、子类

六、常量、变量、属性、小标

七、构造器

八、协议

九、扩展

十、泛型

十一、类型别名



*/


//: [Next](@next)
